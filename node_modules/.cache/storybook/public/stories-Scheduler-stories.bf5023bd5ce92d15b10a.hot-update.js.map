{"version":3,"file":"stories-Scheduler-stories.bf5023bd5ce92d15b10a.hot-update.js","mappings":";;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;;;;;;;;;;;;;;;;;;;;;;AC9DA;AACA;AAMA;AAMA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAGA;AAIA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AC/DA;AAAA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AACA;AACA;AACA;AAAA","sources":["webpack://@wizyvision/react-schedule/./src/lib/constants/appointment.js","webpack://@wizyvision/react-schedule/./src/lib/container/Slot/index.js","webpack://@wizyvision/react-schedule/./src/lib/utils/getAppointmentStyle.js","webpack://@wizyvision/react-schedule/./src/lib/utils/theme.js"],"sourcesContent":["const WIDTH = 100\nconst HEIGHT = 65;\nconst MIN_HEIGHT = 35;\n\nconst HEIGHT_REDUCTION_CONCURRENT = 5;\n\nexport {\n    WIDTH,\n    HEIGHT,\n    MIN_HEIGHT,\n    HEIGHT_REDUCTION_CONCURRENT,\n}","import { TableCell, useTheme, lighten } from '@mui/material';\nimport { HEIGHT } from '../../constants/appointment';\nimport { slotBg } from '../../utils/getAppointmentStyle';\nimport { useSchedulerContext } from '../../context/SchedulerProvider';\nimport { styled } from '@mui/system';\n\nconst Slot = styled(TableCell)((props) => {\n  const { color = \"primary\", SlotProps, } = useSchedulerContext()\n  const { index, canDrop, isOver, width } = props;\n  const { secondaryDuration = 30, style, slotBackground} = SlotProps || {};\n  const theme = useTheme()\n\n  const bg = slotBg(canDrop, isOver, slotBackground, theme, color);\n\n  // const borderRightColor = () => {\n  //   let color = theme.palette.borderRightColor.light\n  //   switch (secondaryDuration) {\n  //     case 15:\n  //       color = index % 4 !== 3 ? \n  //       theme.palette.borderRightColor.light\n  //       : theme.palette.borderRightColor.main; \n  //       break;\n  //     default:\n  //       color = index % 2 !== 1 ? \n  //       theme.palette.borderRightColor.light\n  //       : theme.palette.borderRightColor.main; \n  //       break;\n  //   }\n  //   return color;\n  // };\n\n  // const borderRightStyle = () => {\n  //   switch (secondaryDuration) {\n  //     case 15:\n  //       if (index % 2 !== 1) {\n  //         return 'none';\n  //       }\n  //       return 'solid';\n  //     default:\n  //       return 'solid';\n  //   }\n  // };\n\n  return {\n    paddingTop: theme.spacing(1),\n    paddingBottom: theme.spacing(1),\n    paddingLeft: 0,\n    paddingRight: 0,\n    position: 'relative',\n    backgroundColor: bg,\n    width: width,\n    height: HEIGHT,\n    overflow: 'visible',\n    verticalAlign: 'top',\n    borderRightWidth: '1px',\n    borderRightStyle: 'solid',\n    borderRightColor: theme.palette.borderRightColor.light,\n    // borderRightStyle: borderRightStyle(),\n    ...style,\n  };\n});\n\nexport default Slot;\n","import moment from 'moment';\nimport {\n  HEIGHT,\n  HEIGHT_REDUCTION_CONCURRENT,\n  MIN_HEIGHT,\n  WIDTH,\n} from '../constants/appointment';\nimport {\n  dropBackgroundColor,\n  overBackgroundColor,\n  slotBackgroundColor,\n} from './theme';\n\nexport const slotBg = (canDrop, isOver, slotBackground, theme, color) => {\n  const { dropBg, overBg } = slotBackground || {};\n\n  const slotColor = slotBackgroundColor(theme);\n  const overColor = overBackgroundColor(theme);\n  const dropColor = dropBackgroundColor(theme);\n\n  let backgroundColor = slotColor[color];\n  if (canDrop && isOver) {\n    backgroundColor = dropBg || dropColor[color]; // Highlight color when canDrop and isOver\n  } else if (canDrop) {\n    backgroundColor = overBg || overColor[color]; // Color when only canDrop is true\n  }\n  return backgroundColor;\n};\n\nexport const getSlotWidth = (slotDuration) => {\n  switch (slotDuration) {\n    case 15:\n      return WIDTH / 2;\n    default:\n      return WIDTH;\n  }\n};\n\nexport const getAppointmentWidth = (timeSlot, start, end, duration) => {\n  const slotStart = moment(timeSlot, 'hh:mm a');\n  const slotEnd = moment(slotStart).add(duration, 'minutes');\n\n  const appointmentStart = moment(start);\n  const appointmentEnd = moment(end);\n\n  const totalMinutesInSlot = moment\n    .duration(slotEnd.diff(slotStart))\n    .asMinutes();\n  const appointmentDuration = moment\n    .duration(appointmentEnd.diff(appointmentStart))\n    .asMinutes();\n\n  const width =\n    (appointmentDuration / totalMinutesInSlot) * getSlotWidth(duration);\n\n  return width + 'px';\n};\n\nexport const getAppointmentHeight = (concurrentCount) => {\n  let height = HEIGHT;\n  const computedHeight = HEIGHT - (HEIGHT_REDUCTION_CONCURRENT * concurrentCount);\n  height = Math.max(MIN_HEIGHT, computedHeight);\n  return height;\n};\n","export const slotBackgroundColor = (theme) => ({\n    primary: theme.palette.slotBg.main,\n    secondary: theme.palette.slotBg.main\n})\n\nexport const overBackgroundColor = (theme) => ({\n    primary: theme.palette.drop.main,\n    secondary: theme.palette.drop.mainTwo\n})\n\nexport const dropBackgroundColor = (theme) => ({\n    primary: theme.palette.drop.light,\n    secondary: theme.palette.drop.lightTwo\n})\n\nexport const dragBackgroundColor = (theme) => ({\n    primary: theme.palette.drag.main,\n    secondary: theme.palette.drag.main,\n})\n"],"names":[],"sourceRoot":""}