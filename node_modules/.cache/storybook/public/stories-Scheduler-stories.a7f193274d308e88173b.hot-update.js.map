{"version":3,"file":"stories-Scheduler-stories.a7f193274d308e88173b.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAGA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AASA;AAEA;AAEA;AACA;AACA;AACA;;AAcA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3FA;AAEA;AACA;AACA;AAAA;AACA;AAAA;;AACA;AAEA;AAQA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAIA;AAEA;AAKA;AAEA;AACA;AAEA;;AAEA;AACA;AAEA;AAQA;AACA;AAEA;AACA;;AAGA;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAEA;AACA;AACA;AACA;AASA;;AAEA;AACA;AACA","sources":["webpack://@wizyvision/react-schedule/","webpack://@wizyvision/react-schedule/./src/lib/utils/getAppointments.js"],"sourcesContent":[null,"import moment from 'moment';\n\nexport function getSortAppointments (appointments, user){\n  return appointments.filter(\n    (event) => user === event.user).sort(\n    (a, b) => a.schedule?.startDate - b.schedule?.startDate)\n}\n\nexport function getFilteredAppointments(\n  appointmentList,\n  user,\n  timeSlot,\n  date,\n  duration,\n  concurrentMapping\n) {\n  return appointmentList\n    .filter((appointment) => appointment.user === user)\n    .filter((appointment) => {\n      const startDate = moment(appointment.schedule?.startDate);\n\n      const currentDate = moment(date);\n      const slotStartTime = moment(\n        `${currentDate.format('YYYY-MM-DD')} ${timeSlot}`,\n        'YYYY-MM-DD hh:mm a'\n      );\n      const slotEndTime = moment(slotStartTime).add(duration, 'minutes');\n\n      return (\n        startDate.isSame(currentDate, 'day') &&\n        (startDate.isAfter(slotStartTime) || slotStartTime.isSame(startDate)) &&\n        startDate.isBefore(slotEndTime)\n      );\n    })\n    .map((appointment) => {\n      const height = concurrentMapping[appointment.id]\n      return {\n        ...appointment,\n        height,\n      };\n    });\n}\n\nexport const getUpdatedAppointments = (\n  appointments,\n  appointment,\n  date,\n  timeSlot,\n  duration,\n  user\n) => {\n  const slotDate = moment(date).format('YYYY-MM-DD') + ' ' + timeSlot;\n  const slotStartTime = moment(slotDate);\n\n  const existingIndex = appointments.findIndex(\n    (existingAppointment) => existingAppointment.id === appointment.id\n  );\n\n  let updatedAppointments = {\n    ...appointment,\n    user,\n    schedule: {\n      startDate: slotStartTime.toDate(),\n      endDate: moment(slotStartTime).add(duration, 'minutes').toDate(),\n    },\n  };\n  if (existingIndex !== -1) {\n    updatedAppointments = {\n      ...appointment,\n      user,\n      schedule: {\n        startDate: slotStartTime.toDate(),\n        endDate: moment(slotStartTime)\n          .add(\n            moment(appointment.schedule.endDate).diff(\n              moment(appointment.schedule.startDate),\n              'minutes'\n            ), // Keep the original duration\n            'minutes'\n          )\n          .toDate(),\n      },\n    };\n  }\n  return updatedAppointments;\n};"],"names":[],"sourceRoot":""}