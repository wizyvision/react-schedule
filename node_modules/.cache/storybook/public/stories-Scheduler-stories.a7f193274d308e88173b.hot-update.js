"use strict";
self["webpackHotUpdate_wizyvision_react_schedule"]("stories-Scheduler-stories",{

/***/ "./src/lib/components/Calendar/UserTimeSlot.js":
/*!*****************************************************!*\
  !*** ./src/lib/components/Calendar/UserTimeSlot.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! moment */ "./node_modules/moment/moment.js");
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(moment__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _utils_getAppointments__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/getAppointments */ "./src/lib/utils/getAppointments.js");
/* harmony import */ var _utils_getAppointmentStyle__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/getAppointmentStyle */ "./src/lib/utils/getAppointmentStyle.js");
/* harmony import */ var _context_SchedulerProvider__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../context/SchedulerProvider */ "./src/lib/context/SchedulerProvider.js");
/* harmony import */ var _container_Slot__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../container/Slot */ "./src/lib/container/Slot/index.js");

// import { useDrop } from 'react-dnd';





function UserTimeSlot(props) {
    var user = props.user, timeSlot = props.timeSlot, key = props.key, index = props.index;
    var _useSchedulerContext = (0,_context_SchedulerProvider__WEBPACK_IMPORTED_MODULE_4__.useSchedulerContext)(), appointmentList = _useSchedulerContext.appointmentList, onAppointmentChange = _useSchedulerContext.onAppointmentChange, duration = _useSchedulerContext.duration, date = _useSchedulerContext.date, SlotProps = _useSchedulerContext.SlotProps;
    var _ref = SlotProps || {}, _ref_secondaryDuration = _ref.secondaryDuration, secondaryDuration = _ref_secondaryDuration === void 0 ? 30 : _ref_secondaryDuration;
    //   const [{ isOver, canDrop }, drop] = useDrop({
    //     accept: 'APPOINTMENT',
    //     drop: (appointment, monitor) => {
    //       const droppedAppointment = appointment.appointment;
    //       const updatedAppointments = getUpdatedAppointments(
    //         appointmentList,
    //         droppedAppointment,
    //         date,
    //         timeSlot,
    //         duration,
    //         user
    //       );
    //       onAppointmentChange(updatedAppointments);
    //     },
    //     collect: (monitor) => ({
    //       isOver: monitor.isOver(),
    //       canDrop: monitor.canDrop(),
    //     }),
    //   });
    var sortedAppointments = (0,_utils_getAppointments__WEBPACK_IMPORTED_MODULE_2__.getSortAppointments)(appointmentList, user);
    var concurrentAppointments = {};
    var previousConcurrentCount = 0;
    sortedAppointments.forEach(function(event, index) {
        var startDate = moment__WEBPACK_IMPORTED_MODULE_1___default()(event.schedule.startDate);
        var count = sortedAppointments.reduce(function(acc, otherEvent, otherIndex) {
            if (index !== otherIndex && moment__WEBPACK_IMPORTED_MODULE_1___default()(otherEvent.schedule.startDate).isBefore(startDate) && moment__WEBPACK_IMPORTED_MODULE_1___default()(otherEvent.schedule.endDate).isAfter(startDate)) {
                return acc + 1;
            }
            return acc;
        }, 0);
        concurrentAppointments[event.id] = count > 0 ? count + previousConcurrentCount : 0;
        // Update previousConcurrentCount for the next event
        previousConcurrentCount = count > 0 ? concurrentAppointments[event.id] : 0;
    });
    var filteredAppointments = (0,_utils_getAppointments__WEBPACK_IMPORTED_MODULE_2__.getFilteredAppointments)(appointmentList, user, timeSlot, date, secondaryDuration, concurrentAppointments);
    var width = (0,_utils_getAppointmentStyle__WEBPACK_IMPORTED_MODULE_3__.getSlotWidth)(secondaryDuration);
    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_container_Slot__WEBPACK_IMPORTED_MODULE_5__["default"], {
        key: key,
        colSpan: 1,
        //   ref={drop}
        index: index
    });
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (UserTimeSlot);
UserTimeSlot.__docgenInfo = {
    "description": "",
    "methods": [],
    "displayName": "UserTimeSlot"
};


/***/ }),

/***/ "./src/lib/utils/getAppointments.js":
/*!******************************************!*\
  !*** ./src/lib/utils/getAppointments.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getFilteredAppointments: () => (/* binding */ getFilteredAppointments),
/* harmony export */   getSortAppointments: () => (/* binding */ getSortAppointments),
/* harmony export */   getUpdatedAppointments: () => (/* binding */ getUpdatedAppointments)
/* harmony export */ });
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! moment */ "./node_modules/moment/moment.js");
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(moment__WEBPACK_IMPORTED_MODULE_0__);
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}

function getSortAppointments(appointments, user) {
    return appointments.filter(function(event) {
        return user === event.user;
    }).sort(function(a, b) {
        var _a_schedule, _b_schedule;
        return ((_a_schedule = a.schedule) === null || _a_schedule === void 0 ? void 0 : _a_schedule.startDate) - ((_b_schedule = b.schedule) === null || _b_schedule === void 0 ? void 0 : _b_schedule.startDate);
    });
}
function getFilteredAppointments(appointmentList, user, timeSlot, date, duration, concurrentMapping) {
    return appointmentList.filter(function(appointment) {
        return appointment.user === user;
    }).filter(function(appointment) {
        var _appointment_schedule;
        var startDate = moment__WEBPACK_IMPORTED_MODULE_0___default()((_appointment_schedule = appointment.schedule) === null || _appointment_schedule === void 0 ? void 0 : _appointment_schedule.startDate);
        var currentDate = moment__WEBPACK_IMPORTED_MODULE_0___default()(date);
        var slotStartTime = moment__WEBPACK_IMPORTED_MODULE_0___default()("".concat(currentDate.format("YYYY-MM-DD"), " ").concat(timeSlot), "YYYY-MM-DD hh:mm a");
        var slotEndTime = moment__WEBPACK_IMPORTED_MODULE_0___default()(slotStartTime).add(duration, "minutes");
        return startDate.isSame(currentDate, "day") && (startDate.isAfter(slotStartTime) || slotStartTime.isSame(startDate)) && startDate.isBefore(slotEndTime);
    }).map(function(appointment) {
        var height = concurrentMapping[appointment.id];
        return _object_spread_props(_object_spread({}, appointment), {
            height: height
        });
    });
}
var getUpdatedAppointments = function(appointments, appointment, date, timeSlot, duration, user) {
    var slotDate = moment__WEBPACK_IMPORTED_MODULE_0___default()(date).format("YYYY-MM-DD") + " " + timeSlot;
    var slotStartTime = moment__WEBPACK_IMPORTED_MODULE_0___default()(slotDate);
    var existingIndex = appointments.findIndex(function(existingAppointment) {
        return existingAppointment.id === appointment.id;
    });
    var updatedAppointments = _object_spread_props(_object_spread({}, appointment), {
        user: user,
        schedule: {
            startDate: slotStartTime.toDate(),
            endDate: moment__WEBPACK_IMPORTED_MODULE_0___default()(slotStartTime).add(duration, "minutes").toDate()
        }
    });
    if (existingIndex !== -1) {
        updatedAppointments = _object_spread_props(_object_spread({}, appointment), {
            user: user,
            schedule: {
                startDate: slotStartTime.toDate(),
                endDate: moment__WEBPACK_IMPORTED_MODULE_0___default()(slotStartTime).add(moment__WEBPACK_IMPORTED_MODULE_0___default()(appointment.schedule.endDate).diff(moment__WEBPACK_IMPORTED_MODULE_0___default()(appointment.schedule.startDate), "minutes"), "minutes").toDate()
            }
        });
    }
    return updatedAppointments;
};


/***/ })

});
//# sourceMappingURL=stories-Scheduler-stories.a7f193274d308e88173b.hot-update.js.map