"use strict";
self["webpackHotUpdate_wizyvision_react_schedule"]("stories-Scheduler-stories",{

/***/ "./src/lib/components/Scheduler/SchedulerProvider.js":
/*!***********************************************************!*\
  !*** ./src/lib/components/Scheduler/SchedulerProvider.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SchedulerProvider: () => (/* binding */ SchedulerProvider),
/* harmony export */   useSchedulerContext: () => (/* binding */ useSchedulerContext)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);

var SchedulerContext = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createContext();
var SchedulerProvider = function(param) {
    var children = param.children, SlotProps = param.SlotProps, AppointmentProps = param.AppointmentProps, groupId = param.groupId, groups = param.groups, users = param.users, appointmentList = param.appointmentList, onAppointmentChange = param.onAppointmentChange, durationOptions = param.durationOptions, _param_duration = param.duration, duration = _param_duration === void 0 ? 60 : _param_duration, onDurationChange = param.onDurationChange, date = param.date, onDateChange = param.onDateChange, onPrevDate = param.onPrevDate, onNextDate = param.onNextDate, color = param.color;
    var value = {
        groupId: groupId,
        groups: groups,
        users: users,
        appointmentList: appointmentList,
        onAppointmentChange: onAppointmentChange,
        durationOptions: durationOptions,
        duration: duration,
        onDurationChange: onDurationChange,
        date: date,
        onDateChange: onDateChange,
        onPrevDate: onPrevDate,
        onNextDate: onNextDate,
        SlotProps: SlotProps,
        AppointmentProps: AppointmentProps,
        color: color
    };
    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(SchedulerContext.Provider, {
        value: value
    }, children);
};
var useSchedulerContext = function() {
    return react__WEBPACK_IMPORTED_MODULE_0___default().useContext(SchedulerContext);
};
SchedulerProvider.__docgenInfo = {
    "description": "",
    "methods": [],
    "displayName": "SchedulerProvider",
    "props": {
        "duration": {
            "defaultValue": {
                "value": "60",
                "computed": false
            },
            "required": false
        }
    }
};


/***/ })

});
//# sourceMappingURL=stories-Scheduler-stories.5f07a20ab8f760ccc949.hot-update.js.map