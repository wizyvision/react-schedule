{"version":3,"file":"stories-Scheduler-stories.8b1a9fe76a81750cca38.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAMA;AAMA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAGA;AAIA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://@wizyvision/react-schedule/./src/lib/utils/getAppointmentStyle.js"],"sourcesContent":["import moment from 'moment';\nimport {\n  HEIGHT,\n  HEIGHT_REDUCTION_CONCURRENT,\n  MIN_HEIGHT,\n  WIDTH,\n} from '../constants/appointment';\nimport {\n  dropBackgroundColor,\n  overBackgroundColor,\n  slotBackgroundColor,\n} from './theme';\n\nexport const slotBg = (canDrop, isOver, slotBackground, theme, color) => {\n  const { dropBg, overBg } = slotBackground || {};\n\n  console.log(theme)\n  const slotColor = slotBackgroundColor(theme);\n  const overColor = overBackgroundColor(theme);\n  const dropColor = dropBackgroundColor(theme);\n\n  let backgroundColor = slotColor[color];\n  if (canDrop && isOver) {\n    backgroundColor = dropBg || dropColor[color]; // Highlight color when canDrop and isOver\n  } else if (canDrop) {\n    backgroundColor = overBg || overColor[color]; // Color when only canDrop is true\n  }\n  return backgroundColor;\n};\n\nexport const getSlotWidth = (slotDuration) => {\n  switch (slotDuration) {\n    case 15:\n      return WIDTH / 2;\n    default:\n      return WIDTH;\n  }\n};\n\nexport const getAppointmentWidth = (timeSlot, start, end, duration) => {\n  const slotStart = moment(timeSlot, 'hh:mm a');\n  const slotEnd = moment(slotStart).add(duration, 'minutes');\n\n  const appointmentStart = moment(start);\n  const appointmentEnd = moment(end);\n\n  const totalMinutesInSlot = moment\n    .duration(slotEnd.diff(slotStart))\n    .asMinutes();\n  const appointmentDuration = moment\n    .duration(appointmentEnd.diff(appointmentStart))\n    .asMinutes();\n\n  const width =\n    (appointmentDuration / totalMinutesInSlot) * getSlotWidth(duration);\n\n  return width + 'px';\n};\n\nexport const getAppointmentHeight = (concurrentCount) => {\n  let height = HEIGHT;\n  const computedHeight = HEIGHT - (HEIGHT_REDUCTION_CONCURRENT * concurrentCount);\n  height = Math.max(MIN_HEIGHT, computedHeight);\n  return height;\n};\n"],"names":[],"sourceRoot":""}